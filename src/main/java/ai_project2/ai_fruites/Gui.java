
package ai_project2.ai_fruites;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author pc
 */
public class Gui extends javax.swing.JFrame {
int color;
int x,y;
int epoch;
double rate,goal;
int activation_fun;
int neural;
double[][] hidden_weight;
double[][] output_weight;
double[][] delta_weight_output;
 double[][]delta_weight_hidden;
double []output_neural=new double[3];
double []error=new double[3];
double []yd_out={1,2,3};
double [] hidden_threshold;
double [] output_threshold=new double[3];
double [] deltaoutput_threshold=new double[3];
double [] deltahidden_threshold;
int count=0;
double crossentropy;
private boolean Flag1,Flag2,Flag3;
boolean first_time=false;
ArrayList<Fruit> points  = new ArrayList<>();

double[] Ya ;
    /**
     * Creates new form Gui
     */
    public Gui() {
        initComponents();
        this.jComboBox1.addItem("Sigmoid");
        this.jComboBox1.addItem("Tanh");
        this.jComboBox1.addItem("RELU");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jSlider1 = new javax.swing.JSlider();
        alpha_text = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        drawingPanel = new javax.swing.JPanel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        classify = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        accuracy_text = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 204));

        jTabbedPane1.setBackground(new java.awt.Color(255, 204, 204));

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setBackground(new java.awt.Color(153, 204, 255));
        jLabel1.setFont(new java.awt.Font("Lucida Sans", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 102));
        jLabel1.setText("Fruit Classifications");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 0, 102));
        jLabel2.setText("Epoch");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 0, 102));
        jLabel3.setText("Learnig Rate");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 0, 102));
        jLabel4.setText("# Of Nueral");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 0, 102));
        jLabel5.setText("Activation Function");

        jSlider1.setBackground(new java.awt.Color(102, 0, 102));
        jSlider1.setForeground(new java.awt.Color(102, 0, 102));
        jSlider1.setMaximum(10);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 0, 102));
        jLabel6.setText("Goal");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(102, 0, 102));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 26)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 204, 255));
        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(138, 138, 138)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(76, 76, 76))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(84, 84, 84)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(alpha_text, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(135, 135, 135))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(alpha_text, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab1", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));

        drawingPanel.setBackground(new java.awt.Color(255, 255, 255));
        drawingPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawingPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout drawingPanelLayout = new javax.swing.GroupLayout(drawingPanel);
        drawingPanel.setLayout(drawingPanelLayout);
        drawingPanelLayout.setHorizontalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 341, Short.MAX_VALUE)
        );
        drawingPanelLayout.setVerticalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 338, Short.MAX_VALUE)
        );

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "yellow", "Orange", "Red", "Green" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 0, 102));
        jLabel7.setText("Color");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 0, 102));
        jLabel8.setText("Sweetness");

        jSpinner1.setMaximumSize(new java.awt.Dimension(10, 10));
        jSpinner1.setMinimumSize(new java.awt.Dimension(1, 1));

        classify.setText("Classify");
        classify.setActionCommand("");
        classify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classifyActionPerformed(evt);
            }
        });

        jButton2.setText("Upload File");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        accuracy_text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accuracy_textActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(69, 69, 69)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(classify)
                            .addComponent(jButton2)
                            .addComponent(accuracy_text, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(drawingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(363, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(drawingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(classify)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(accuracy_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab2", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        // TODO add your handling code here:
         float alp = (float) (jSlider1.getValue() / 10.0);
        alpha_text.setText(String.valueOf(alp));
    }//GEN-LAST:event_jSlider1StateChanged

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        epoch=Integer.parseInt(this.jTextField1.getText());
        rate=Double.parseDouble(this.alpha_text.getText());
        neural=Integer.parseInt(this.jTextField3.getText());
        activation_fun=this.jComboBox1.getSelectedIndex();
        goal=Double.parseDouble(this.jTextField2.getText());
      hidden_weight = new double[2][neural];
      output_weight = new double[3][neural];
      delta_weight_output=new double[3][neural];
      delta_weight_hidden=new double[2][neural];
      Ya = new double[neural];
         hidden_threshold=new double[neural];
         deltahidden_threshold=new double[neural];

    jTabbedPane1.setSelectedIndex(1);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void drawingPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanelMouseClicked
        // TODO add your handling code here:
//        x = evt.getX();
//            y = evt.getY();
            
           // PointDraw(x, y);
    }//GEN-LAST:event_drawingPanelMouseClicked

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        color=jComboBox2.getSelectedIndex();
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void classifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classifyActionPerformed
        // TODO add your handling code here:
        if(!first_time){
         first_time=true;
         intilized_weight(); 
          System.out.println("jjjj");
        }
       
       for(int e=0;e<epoch;e++){
//           double totalerror=0;
//      int actual=0;
      if(crossentropy!=goal){
       for(int i=0;i<points.size();i++){
       activat(i);  //to find ya for hidden and output
//       totalerror=calculateTotalError(error);
       double max=Double.MIN_VALUE;
       int acu=0;
       for(int j=0;j<output_neural.length;j++){
        //  System.out.println(output_neural[j]);
           if(max<=output_neural[j]){
             max=output_neural[j];
             acu=j+1;

           }
       }
         //  if(max>points.get(i).getYActual()){
             points.get(i).setYActual(max);
            points.get(i).setactual_classnum(acu);

       
       //}
       
      // System.out.println(points.get(i).getYActual());
       //drawDecisionBoundaries(this.drawingPanel.getGraphics(),actual);
       training( i); 
//         for(int k=0;k<3;k++){
//         for(int j=0;j<neural;j++){ 
//       output_weight[i][j]=getRandomNumber();
//         System.out.println(output_weight[k][j]);
//        output_weight[i][j]=1;
//         }
//    }
       update();
        
       }       
     }
      double n=0.0;                               //to find crossentropy
     for(int i=0;i<points.size();i++){
         double m=0.0;
        for(int j=0;j<3;j++){
          m+=(points.get(i).getYDesired())* (Math.log(points.get(i).getYActual()));
        }
        n+=m;
       }
     crossentropy=(-1/(points.size()))* n;
   //  double averageError = totalerror / points.size();
        
       }
         double  accuracy=Accuracy();
     accuracy_text.setText(accuracy+"");
        for(int i=0;i<points.size();i++){
     //System.out.println(points.get(i).getactual_classnum());
        }
       
    }//GEN-LAST:event_classifyActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        points.clear();
        readTrainingData("D:\\Documents\\Desktop\\Ai_fruites\\src\\main\\java\\ai_project2\\ai_fruites\\data.txt");
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void accuracy_textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accuracy_textActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_accuracy_textActionPerformed
 
   private void readTrainingData(String fileName) {
       
    try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
        String line;
        while ((line = br.readLine()) != null) {
            String[] values = line.split(",");
            
            // Check if the line has at least three values
            if (values.length >= 3) {
                Fruit p = new Fruit();
               
                // Trim spaces and then try to parse
//               p.setColorr(normalize(Double.parseDouble(values[0].trim()), 0.0, 1.0));
//p.setsweetness(normalize(Integer.parseInt(values[1].trim()), 0.0, 10.0));
               p.setColorr(Double.parseDouble(values[0].trim()));
               p.setsweetness(Integer.parseInt(values[1].trim()));
                p.setYd(Integer.parseInt(values[2].trim()));
             // p.setClass(Integer.parseInt(values[2].trim()));
                points.add(p);
            } 
            else {
            }
        }
    } 
    catch (IOException | NumberFormatException e) {
        e.printStackTrace();
    }
} 
   private double normalize(double value, double min, double max) {
        double range = max - min;
        if (range == 0.0) {
            System.out.println("range=0.0");
        }
        return (value - min) / range;
    }
 private double denormalize(double normalizedValue, double min, double max) {
        double range = max - min;
        return (normalizedValue * range) + min;
    }
private double denormalizeOutput(double value) {
        // Adjust the min and max values based on the range of your output
        double minOutput = 0.0;
        double maxOutput = 1.0;

        return denormalize(value, minOutput, maxOutput);
    }

//public void PointDraw() {
//int sweet=(int)(this.jSpinner1.getValue());
//        Graphics g = drawingPanel.getGraphics();
//        Graphics2D g2 = (Graphics2D) g;
//        
//        g2.drawOval((int) x, (int) y, 8, 8);
//        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
//        
//        double posX = (double) (x - drawingPanel.getWidth() / 2) / 10;
//        double posY = (double) (drawingPanel.getHeight() / 2 - y) / 10;
//        Fruit p = new Fruit();
//        if(color == 0&& sweet>=1&&sweet<=5)        //Apple
//        {
//            g2.setColor(Color.YELLOW);
//            p.setColorr(1);
//            p.setClassNum(1);
//            p.setsweetness(sweet);
//            Flag1 = true;
//        }
//        else if(color == 0&& sweet>=6&&sweet<=10)    //Banana
//        {
//            g2.setColor(Color.YELLOW);
//            p.setColorr(2);
//            p.setClassNum(2);
//            p.setsweetness(sweet);
//
//            Flag1 = true;
//        }
//        else if(color == 1)                         //Orange
//        {
//            g2.setColor(Color.ORANGE);
//            p.setColorr(3);
//            p.setClassNum(3);
//            p.setsweetness(sweet);
//
//            Flag2 = true;
//        }
//   else if(color == 2)                            //Apple
//        {
//            g2.setColor(Color.RED);
//           // p.setColorr(CRED);
//            p.setClassNum(1);
//            p.setsweetness(sweet);
//
//            Flag3 = true;
//        }
//        else if(color == 3)                            //Apple
//        {
//            g2.setColor(Color.green);
//            p.setColor(Color.green);
//            p.setClassNum(1);
//            p.setsweetness(sweet);
//
//            Flag3 = true;
//        }
//        
//      //  p.setXPredect((int) x);
//       // p.setYPredect((int) y);
//        points.add(p);
//        g2.fillOval((int) x, (int) y, 8, 8);
//    }
public void intilized_weight(){
    double d=2.4/neural;
    for(int i=0;i<2;i++){
         for(int j=0;j<neural;j++){ 
        // hidden_weight[i][j]=1.0;
        hidden_weight[i][j] = getRandomNumber(1.2);
      //   System.out.println("hw="+hidden_weight[i][j]);
         }
    }
        for(int i=0;i<3;i++){
         for(int j=0;j<neural;j++){ 
       output_weight[i][j]=getRandomNumber(d);
//output_weight[i][j] = 1.0;
       
       
         }
    }
    for(int i=0;i<3;i++){ 
      output_threshold[i]=1;
      // output_threshold[i]=1; 
    } 
    for(int i=0;i<hidden_threshold.length;i++){ 
        hidden_threshold[i]=-1;
       //hidden_threshold[i]=1;  
    } 
}

    public static double getRandomNumber(double d) {
        // Create an instance of Random
        Random random = new Random();

        // Generate a random double between -1.2 and 1.2
        double randomNumber = -d + (d - (-d)) * random.nextDouble();

        return randomNumber;
    }
    
    public void activat(int index){
                                                    //to find ya for hidden layer
         for(int j=0;j<Ya.length;j++){
         double x1=(points.get(index).colorr)*(hidden_weight[0][j]);
         double x2=(points.get(index).getSweetness())*(hidden_weight[1][j]);
//         double x=(points.get(index).getX())*(hidden_weight[2][j]);
//         double y=(points.get(index).getY())*(hidden_weight[3][j]);
         Ya[j]=(x1+x2); //+hidden_threshold[j];

         if(activation_fun==0){                      // sigmoid
           Ya[j]= 1.0 / (1.0 + Math.exp(-Ya[j])); 
                  
         }
         
         else if(activation_fun==1){                 //tanh
             
             Ya[j]=Math.tanh(Ya[j]);
         }
         else if(activation_fun==2){                //Relu
             Ya[j]=Math.max(0, Ya[j]);
         }
 
     }
                                                  //to find ya for output layer
         for(int j=0;j<3;j++){
                //   System.out.println("Output Neural[" + j + "]: " + output_neural[j]);
             double y=0.0;
             for(int k=0;k<Ya.length;k++){
          y+=Ya[k]*output_weight[j][k];
          
     }
   output_neural[j]=(y);//+output_threshold[j];        // output_neural = ya
        
         }
        
      //   output_neural=softmax(output_neural);  
    for(int j=0;j<output_neural.length;j++){
          output_neural[j]=Math.tanh( output_neural[j]);
//      output_neural[j] = denormalizeOutput(output_neural[j]);
 System.out.println(output_neural[j]);


    }
          for(int i=0;i<3;i++){
         error[i]=yd_out[i]-output_neural[i];

          }
    }
//    private double calculateTotalError(double[] error) {
//    // Calculate the total error (sum of squared errors)
//    double totalError = 0;
//    for (double e : error) {
//        totalError += Math.pow(e, 2);
//    }
//    return 0.5 * totalError;  // Multiply by 0.5 to simplify derivative calculation
//}
    public  void training(int index) {
         double []ya_derivative=new double[Ya.length];          //for hidden layer
         double [][]yout_derivative=softmaxDerivative(output_neural);
         double []derivative_output=new double[3];             //for output layer
         for(int i=0;i<output_neural.length;i++){          //for output
             //for(int j=0;j<output_neural.length;j++){
                // if(i==j){
                   derivative_output[i] = 1.0 -(output_neural[i] * output_neural[i]);
                   deltaoutput_threshold[i]=(rate )* (-1 )* (derivative_output[i]);
                 }
            // }
        // }

         for(int i=0;i<3;i++){
             for(int j=0;j<Ya.length;j++){
                 delta_weight_output[i][j]=(rate) * (Ya[j]) * (derivative_output[i]);
             }
             
         }         
         //---------------------------------------end of trainaing output layer
         
       for(int i=0;i<Ya.length;i++){
        if(activation_fun==0){                      // sigmoid
           ya_derivative[i]= (Ya[i]) * (1 -  Ya[i]); 
                  
         }
         else if(activation_fun==1){                 //tanh
              ya_derivative[i]=  1.0 -( Ya[i] * Ya[i]);
             
         }
         else if(activation_fun==2){                //Relu
             if(Ya[i]==0){
              ya_derivative[i]=0;   
             }
             else{
                 ya_derivative[i]=1;
             }
         }
        ya_derivative[i]=(ya_derivative[i])*(((output_weight[0][i])*(derivative_output[0]))+((output_weight[1][i])*(derivative_output[1]))+((output_weight[2][i])*(derivative_output[2])));
        deltahidden_threshold[i]=(rate) * (-1) * (ya_derivative[i]);
       }
       //-----------------------------------end of find derivative for hiddden layer
       
         for(int i=0;i<2;i++){                   //i=input
             for(int j=0;j<Ya.length;j++){      //j=hidden layer
                 double x1=(points.get(index).colorr);
                 double x2=(points.get(index).getSweetness());
//                 double x=(points.get(index).getX());
//                 double y=(points.get(index).getY());
                 if(i==0){
                    delta_weight_hidden[i][j]=rate * x1 * (ya_derivative[j]); 
                 }
                 else if(i==1){
                   delta_weight_hidden[i][j]=rate * x2 * (ya_derivative[j]);    
                 }
//                 else if(i==2){
//                   delta_weight_hidden[i][j]=rate * x * ya_derivative[j];    
//                 }
//                 else{
//                    delta_weight_hidden[i][j]=rate * y * ya_derivative[j];  
//                 }
             }
         }    
    }
    public  double[] softmax(double[] outputNeural) {             //activation function for output layer
        // Ensure the input array is not empty
        if (outputNeural.length == 0) {
            throw new IllegalArgumentException("Input array is empty");
        }

        double[] result = new double[outputNeural.length];
        double sum = 0.0;

        // Calculate the exponential for each element and the sum of exponentials
        for (int i = 0; i < outputNeural.length; i++) {
            result[i] = Math.exp(outputNeural[i]);
            sum += result[i];
        }

         for(int i=0;i<outputNeural.length;i++){
          outputNeural[i]=  result[i] /= sum;  
         }
        // Normalize by dividing each element by the sum
        return outputNeural;
           }

    public  double[][] softmaxDerivative(double[] outputNeural) {
        double[] softmaxResult = Arrays.copyOf(outputNeural, outputNeural.length);
    //    softmaxResult=softmax(softmaxResult);
//softmaxResult=output_neural;
        double[][] derivativeMatrix = new double[outputNeural.length][outputNeural.length];
        for (int i = 0; i < outputNeural.length; i++) {
            for (int j = 0; j < outputNeural.length; j++) {
                if (i == j) {
                    derivativeMatrix[i][j] = softmaxResult[i] * (1 - softmaxResult[j]);
                } else {
                    derivativeMatrix[i][j] = -softmaxResult[i] * softmaxResult[j];
                }
            }
        }

        return derivativeMatrix;
    }
    public void update(){
    for(int i=0;i<3;i++){           //for update output weight and threshold
     for(int j=0;j<neural;j++){
          output_weight[i][j]+= delta_weight_output[i][j];  
       //  System.out.println(" o after"+output_weight[i][j]);
         } 
     output_threshold[i]+=deltaoutput_threshold[i];
    }
  
    for(int i=0;i<2;i++){           //for update hidden weight 
     for(int j=0;j<neural;j++){
          hidden_weight[i][j]+= delta_weight_hidden[i][j];  
          // System.out.println(" h after"+hidden_weight[i][j]);

         } 
    }
    for(int i=0;i<neural;i++){    //for update hidden threshold
   hidden_threshold[i]+=deltahidden_threshold[i];
    }
}
public void classification(){
    ArrayList<Fruit> apple  = new ArrayList<>();
    ArrayList<Fruit> orange  = new ArrayList<>();
    ArrayList<Fruit> banana  = new ArrayList<>();
    
    for(int i=0;i<points.size();i++){
    if(points.get(i).getactual_classnum()==1){
        System.out.println(points.get(i).getactual_classnum());
        apple.add(points.get(i));
      
    }
    else if(points.get(i).getactual_classnum()==2){
        System.out.println(points.get(i).getactual_classnum());
        orange.add(points.get(i));
        
    }  
    else if(points.get(i).getactual_classnum()==3){
        System.out.println(points.get(i).getactual_classnum());
        banana.add(points.get(i));   
        
    }
    }
//    System.out.println("apple");
//        print(apple);
//          System.out.println("orange");
//        print(orange);
//        System.out.println("banana");
//        print(banana);
}
public void print(ArrayList<Fruit> F){
   for(int i=0;i<F.size();i++){
       System.out.println(F.get(i).getactual_classnum());
   }
}
public double Accuracy() {
    double correctPredictions = 0.0;
    double acc;

    for (int i = 0; i < points.size(); i++) {
        if (Double.compare(points.get(i).getYDesired(), points.get(i).getactual_classnum()) == 0) {
            correctPredictions++;
        }
    }

    acc = (correctPredictions / points.size()) * 100;
    return acc;
}
   
public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accuracy_text;
    private javax.swing.JTextField alpha_text;
    private javax.swing.JButton classify;
    private javax.swing.JPanel drawingPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
